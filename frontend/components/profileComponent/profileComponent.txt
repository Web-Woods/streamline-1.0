'use client'
import { Avatar } from "@nextui-org/react"
import { useRef, useState } from "react";
import styles from '@/components/auth/Auth.module.css';// Replace with your actual GraphQL queries
import { useMutation, useQuery } from "@apollo/client";
// import { UPDATE_USER_MUTATION } from "@/gql/mutation";
import { USER_QUERY } from "@/gql/query";
import Loading from "@/app/loading";
import { parseCookies } from "nookies";
import client from "@/gql/client";
import { Input } from "@nextui-org/react";
import { Button, ButtonGroup } from "@nextui-org/react";
import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import { faPen } from "@fortawesome/free-solid-svg-icons";

interface ProfileFieldProps {
    type?: string
    label?: string
    placeholder?: string
    defaultValue?: string
    value?: string
    onChange? : (value : any)=> void  
}

function ProfileField({ type, label, placeholder, defaultValue, value = '', onChange
}: ProfileFieldProps) {
    const inputValue = useRef(value);
    const handleOnChange = ()=> {
        if (onChange) {
            console.log(inputValue);
            onChange(inputValue.current);
        }
    };

    return (
        <div className="flex items-end" >
            <Input
                // isReadOnly
                type={type}
                label={label}
                labelPlacement="outside"
                placeholder={placeholder}
                variant="bordered"
                defaultValue={defaultValue}
                value={value}
                className="max-w-xs"
                onChange={handleOnChange}
            />

            <Button color="primary" isIconOnly>
                <FontAwesomeIcon icon={faPen} />
            </Button>
        </div>

    )
}

function ProfileComponent() {

    const [currentUser, setCurrentUser] = useState(JSON.parse(parseCookies()['currentUser']));

    const firstNameRef = useRef();

    const { loading, error, data } = useQuery(USER_QUERY, {
        client,
        variables: {
            id: currentUser.id
        }
    });

    if (loading) {
        return <Loading />
    }

    if (error) {
        return <div>ERROR: {JSON.stringify(error)}</div>
    }

    if (data) {
        console.log(data);
    }

    // const [updateProfile] = useMutation(UPDATE_USER_MUTATION);


    // const [username, setUsername] = useState('');
    // const [fullname, setFullname] = useState('');
    // const [email, setEmail] = useState('');
    // const [password, setPassword] = useState('');
    // const [role, setRole] = useState('');
    // const [designation, setDesignation] = useState('');
    // const [division, setDivision] = useState('');
    // const [permissions, setPermissions] = useState('');


    // // Fetching data from GraphQL API
    // if (loading) return <p>Loading...</p>;
    // if (error) return <p>Error: {error.message}</p>;
    // // Updating profile data
    // const handleUpdate = async () => {
    //     try {
    //         await updateProfile({
    //             variables: {
    //                 input: {
    //                     username,
    //                     fullname,

    //                 },
    //             },
    //         });
    //         // Optionally, you can refetch the data after updating
    //         // refetch();
    //     } catch (error: any) {
    //         console.error('Error updating profile:', error.message);
    //     }
    // };
    // const { profile } = data;


    return (
        <div className="flex flex-col items-center ml-10">

            <ProfileField label="First Name" placeholder="First Name" type='text' value="John" ref={firstNameRef} />
            {/* <ProfileField label="Second Name" placeholder="Second Name" type='text' value="Adams" />
            <ProfileField label="Mobile Number" placeholder="Mobile Number" type='text' value="0712222222" />
            <ProfileField label="Address Line 1" placeholder="Address Line 1" type='text' value="12/1 Hanthana Road" />
            <ProfileField label="Address Line 2" placeholder="Address Line 2" type='text' value="Kandy" />
            <ProfileField label="Postal Code" placeholder="Enter your Postal Code here" type='text' value="00220" />
            <ProfileField label="Postal Code" placeholder="Enter your Postal Code here" type='text' value="00220" />
            <ProfileField label="State" placeholder="Enter State here" type='text' value="Central" />
            <ProfileField label="Area" placeholder="Enter your Area here" type='text' value="Kandy" />
            <ProfileField label="Email" placeholder="Enter your Email here" type='Email' value="john@gmail.com" />
            <ProfileField label="Postal Code" placeholder="Enter your Postal Code here" type='text' value="00220" />
            <ProfileField label="Country" placeholder="Enter your Country here" type='text' value="Sri Lanka" /> */}


            <Button isDisabled color="primary" >
                Submit
            </Button>





            {/* <Avatar
                className="w-40 h-40 mt-5"
                isBordered
                color="danger"
                src="https://i.pravatar.cc/150?u=a042581"
            /> */}
            {/* <div className="flex flex-row items-center  mt-10 space-x-5 mb-10">
                <div className="flex-col space-y-5 w-64 h-64 mb-20">
                    <Input
                        label='Username'
                        labelPlacement='outside'
                        placeholder='Enter username'
                        isRequired={true}
                        value={profile.username}
                        autoComplete='username'
                        onValueChange={(value) => setUsername(value)}
                    />
                    <Input
                        label='Full name'
                        labelPlacement='outside'
                        placeholder='Full name'
                        isRequired={true}
                        value={fullname}
                        autoComplete='fullname'
                        onValueChange={(value) => setFullname(value)}
                    />
                    <Input
                        label='Password'
                        labelPlacement='outside'
                        placeholder='Password'
                        isRequired={true}
                        value={password}
                        autoComplete='password'
                        onValueChange={(value) => setPassword(value)}
                    />
                    <Input
                        label='Email'
                        labelPlacement='outside'
                        placeholder='Enter email'
                        isRequired={true}
                        value={email}
                        autoComplete='email'
                        onValueChange={(value) => setEmail(value)}
                    />
                </div>
                <div className="flex-col space-y-5 w-64 h-64 mb-20">

                    <Input
                        label='Role'
                        labelPlacement='outside'
                        placeholder='Role'
                        isRequired={true}
                        value={role}
                        autoComplete='role'
                        onValueChange={(value) => setRole(value)}
                    />
                    <Input
                        label='Designation'
                        labelPlacement='outside'
                        placeholder='Designation'
                        isRequired={true}
                        value={designation}
                        autoComplete='designation'
                        onValueChange={(value) => setDesignation(value)}
                    />
                    <Input
                        label='Division'
                        labelPlacement='outside'
                        placeholder='Division'
                        isRequired={true}
                        value={division}
                        autoComplete='division'
                        onValueChange={(value) => setDivision(value)}
                    />
                    <Input
                        label='Permissions'
                        labelPlacement='outside'
                        placeholder='Permissions'
                        isRequired={true}
                        value={permissions}
                        autoComplete='permissions'
                        onValueChange={(value) => setPermissions(value)}
                    />
                </div>
            </div>
            <button className=" mb-10 bg-black text-white border-0 w-80 rounded-full px-4 py-2.5 transition duration-300 ease-in-out hover:bg-yellow-500 hover:text-gray-900">
                Update
            </button> */}
        </div>
    )
}

export default ProfileComponent;
