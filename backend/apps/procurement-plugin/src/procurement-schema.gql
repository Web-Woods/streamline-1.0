# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input CreateFileInput {
  name: String
}

input CreatePropertyInput {
  key: String!
  type: String!
  value: String!
}

input CreateRequestInput {
  description: String
  fileId: String
  requestType: String!
  requestedUserId: String!
  status: RequestStatus! = AWAITING_APPROVAL
}

input CreateRequestItemsInput {
  name: String
  requestId: String!
  sku: String!
  type: String
}

input CreateUserInput {
  email: String!
  name: String
  password: String!
  roleId: String
  username: String!
}

input CreateUsersInput {
  users: [CreateUserInput!]!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type File {
  createdAt: DateTime
  id: ID!
  name: String
  requests: Request
  updatedAt: DateTime
}

type FilePage {
  data: [File!]!
  totalPages: Int
}

type Mutation {
  addNewPropertiesToRequestItem(properties: [CreatePropertyInput!]!, requestItemId: String!): RequestItem!
  addNewPropertyToRequestItem(property: CreatePropertyInput!, requestItemId: String!): RequestItem!
  addPropertiesToRequestItem(propertyIds: [String!]!, requestItemId: String!): RequestItem!
  addPropertyToRequestItem(propertyId: String!, requestItemId: String!): RequestItem!
  createFile(input: CreateFileInput!): File!
  createProperty(input: CreatePropertyInput!): Property!
  createRequest(input: CreateRequestInput!): Request!
  createRequestItem(input: CreateRequestItemsInput!): RequestItem!
  createUser(input: CreateUserInput!): User!
  createUsers(inputs: CreateUsersInput!): [User!]!
  deleteFile(id: String!): File!
  deleteProperty(id: String!): Property!
  deleteRequest(id: String!): Request!
  deleteRequestItem(id: String!): RequestItem!
  deleteUser(id: String!): User!
  updateFile(id: String!, input: UpdateFileInput!): File!
  updateProperty(id: String!, input: UpdatePropertyInput!): Property!
  updateRequest(id: String!, input: UpdateRequestInput!): Request!
  updateRequestItem(id: String!, input: UpdateRequestItemsInput!): RequestItem!
  updateUser(id: String!, input: UpdateUserInput!): User!
}

type ProcurementUser {
  createdAt: DateTime
  email: String!
  id: ID!
  name: String
  password: String
  role: Role
  type: ProcurementUserType!
  updatedAt: DateTime
  username: String!
  verificationCodes: [VerificationCode!]!
  verified: Boolean!
}

enum ProcurementUserType {
  APPROVING_USER
  REQUESTING_USER
  REVIEWING_USER
}

type Property {
  createdAt: DateTime
  id: ID!
  key: String!
  requestItems: RequestItem
  type: String!
  updatedAt: DateTime
  value: String!
}

type PropertyPage {
  data: [Property!]!
  totalPages: Int
}

type Query {
  file(id: String!): File!
  files(page: Int! = 1, pageSize: Int! = 10): FilePage!
  properties(page: Int! = 1, pageSize: Int! = 10): PropertyPage!
  property(id: String!): Property!
  request(id: String!): Request!
  requestItem(id: String!): RequestItem!
  requestItems(page: Int! = 1, pageSize: Int! = 10): RequestItemPage!
  requests(page: Int! = 1, pageSize: Int! = 10): RequestPage!
  user(id: String!): User!
  users(page: Int! = 1, pageSize: Int! = 10): UserPage!
}

type Request {
  createdAt: DateTime
  description: String
  file: File
  id: ID!
  requestItems: [RequestItem!]
  requestType: String!
  requestedUser: ProcurementUser
  status: RequestStatus!
  updatedAt: DateTime
}

type RequestItem {
  createdAt: DateTime
  id: ID!
  name: String!
  price: Float
  properties: [Property!]
  quantity: Float
  requests: [Request!]!
  sku: String!
  updatedAt: DateTime
}

type RequestItemPage {
  data: [RequestItem!]!
  totalPages: Int
}

type RequestPage {
  data: [Request!]!
  totalPages: Int
}

enum RequestStatus {
  APPROVED
  AWAITING_APPROVAL
  PROCESSING
  REJECTED
}

type Role {
  createdAt: DateTime
  division: String
  id: ID!
  name: UserRoles!
  updatedAt: DateTime
}

input UpdateFileInput {
  name: String
}

input UpdatePropertyInput {
  key: String
  type: String
  value: String
}

input UpdateRequestInput {
  description: String
  fileId: String
  requestType: String
  requestedDate: DateTime
  requestedUserId: String
  status: RequestStatus = AWAITING_APPROVAL
}

input UpdateRequestItemsInput {
  name: String
  requestId: String
  sku: String
  type: String
}

input UpdateUserInput {
  email: String
  name: String
  password: String
  roleId: String
  username: String
  verified: Boolean
}

type User {
  createdAt: DateTime
  email: String!
  id: ID!
  name: String
  password: String
  role: Role
  updatedAt: DateTime
  username: String!
  verificationCodes: [VerificationCode!]!
  verified: Boolean!
}

type UserPage {
  data: [User!]!
  totalPages: Int
}

enum UserRoles {
  ADMIN
  DIRECTOR
  EMPLOYEE
  PROCUREMENT_STAFF
  STORE_STAFF
}

type VerificationCode {
  code: String!
  createdAt: DateTime
  id: ID!
  updatedAt: DateTime
  userId: String!
}