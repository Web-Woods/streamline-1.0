# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input CreateUserInput {
  email: String!
  name: String
  password: String!
  roleId: String
  username: String!
}

input CreateUsersInput {
  users: [CreateUserInput!]!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input LoginInput {
  password: String!
  username: String!
}

union LoginResultUnion = LoginSuccess | PasswordMismatchError | UserNotExistError

type LoginSuccess {
  accessToken: String!
  me: User!
}

type Mutation {
  createUser(input: CreateUserInput!): User!
  createUsers(inputs: CreateUsersInput!): [User!]!
  deleteUser(id: String!): User!
  login(input: LoginInput!): LoginResultUnion!
  registerNewUser(input: CreateUserInput!): RegisterResultUnion!
  updateUser(id: String!, input: UpdateUserInput!): User!
  verifyUser(input: VerifyUserInput!): VerificationResultUnion!
}

type PasswordMismatchError {
  message: String!
}

type Query {
  user(id: String!): User!
  users(page: Int! = 1, pageSize: Int! = 10): UsersWithCount!
}

type RegisterNewUserSuccess {
  me: User!
  verificationToken: String!
}

union RegisterResultUnion = PasswordMismatchError | RegisterNewUserSuccess | UserNotExistError

type Role {
  createdAt: DateTime
  division: String
  id: ID!
  name: UserRoles!
  updatedAt: DateTime
}

input UpdateUserInput {
  email: String
  name: String
  password: String
  roleId: String
  username: String
  verified: Boolean
}

type User {
  createdAt: DateTime
  email: String!
  id: ID!
  name: String
  password: String
  role: Role
  updatedAt: DateTime
  username: String!
  verificationCodes: [VerificationCode!]!
  verified: Boolean!
}

type UserNotExistError {
  message: String!
}

enum UserRoles {
  ADMIN
  DIRECTOR
  EMPLOYEE
  PROCUREMENT_STAFF
  STORE_STAFF
}

type UsersWithCount {
  data: [User!]
  totalItems: Float!
}

type VerificationCode {
  code: String!
  createdAt: DateTime
  id: ID!
  updatedAt: DateTime
  userId: String!
}

union VerificationResultUnion = PasswordMismatchError | UserNotExistError | VerificationSuccess

type VerificationSuccess {
  me: User!
}

input VerifyUserInput {
  email: String
  username: String!
  verificationToken: String!
}